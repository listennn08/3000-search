{"version":3,"sources":["component/CountySelect.js","component/TownshipSelect.js","component/CusTable.js","App.js","serviceWorker.js","index.js"],"names":["CountySelect","props","optionsItem","options","map","el","index","value","val","key","text","Row","className","Col","md","FormControl","as","custom","onChange","e","name","filter","target","county","selected","selectedName","callback","township","bind","disabled","TownshipSelect","useState","setOptions","useEffect","getOptionsItem","$","get","resp","find","length","data","html","indexOf","replace","CusTable","setData","updateTime","setUpdateTime","page","setPage","loading","setLoading","fetch","axios","then","hsnCd","townNm","listItem","slice","hsnNm","storeNm","href","zipCd","addr","latitude","longitude","title","tel","busiTime","split","busiMemo","total","changePage","i","totalPage","active","items","number","push","Pagination","Item","onClick","Ellipsis","paginationBasic","First","Prev","Next","Last","Table","striped","bordered","hover","Spinner","animation","role","App","setState","state","cnOptions","Navbar","bg","variant","expand","Brand","Container","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5a366977.chunk.js","sourcesContent":["import React from 'react';\nimport { FormControl, Row, Col } from 'react-bootstrap';\n\nconst CountySelect = (props) => {\n    const optionsItem = props.options.map((el, index) => <option value={ el.val } key={ index }>{ el.text }</option>);\n    const getCounty = (e) => {\n        const name = props.options.filter((el) => {\n                if (el.val === e.target.value) {\n                    return el.text;\n                }\n            })[0].text;\n        const county = {\n            selected: e.target.value,\n            selectedName: name\n        };\n        props.callback({ county });\n        props.callback({\n            township: {\n                selected: '',\n                selectedName: '',\n            }\n        })\n    }\n    return (\n            <Row className=\"justify-content-md-center mt-2 mb-2\">\n                <Col md=\"5\">\n                    <FormControl as=\"select\" custom\n                        onChange={ getCounty.bind(this) }\n                        value={ props.county.selected }\n                    >\n                    <option value=\"\" disabled>---請選擇縣市---</option>\n                    { optionsItem }\n                    </FormControl>\n                </Col>\n            </Row>\n    );\n}\n\nexport default CountySelect;","import React, { useState, useEffect } from 'react';\nimport $ from 'jquery';\nimport { FormControl, Row, Col } from 'react-bootstrap';\n\nconst TownshipSelect = (props) => {\n    const [ options, setOptions ] = useState([]);\n    useEffect(() => {\n        getOptionsItem();\n    }, [props.county.selected, props.county.selectedName]);\n    const getOptionsItem = () => {\n        if (props.county.selected) {\n            $.get(`https://api.nlsc.gov.tw/other/ListTown1/${props.county.selected}`,\n            (resp) => {\n                if ($(resp).find('townItem').length > 0) {\n                    const data = [...$(resp).find('townItem')]\n                        .filter((el) => $(el).find('towncode01').html())\n                        .map((el) => {\n                            if ($(el).find('townname').html().indexOf('臺灣省') > -1) {\n                                $(el).find('townname').html(\n                                    $(el).find('townname').html().replace('臺灣省', '')\n                                )\n                            } else if ($(el).find('townname').html().indexOf('福建省') > -1) {\n                                $(el).find('townname').html(\n                                $(el).find('townname').html().replace('福建省', '')\n                                )\n                            }\n                            return {\n                                text: $(el).find('townname').html().replace(props.county.selectedName, ''),\n                                val: $(el).find('townname').html().replace(props.county.selectedName, ''),\n                            }\n                        });\n                    setOptions(data);\n                }\n\n            })\n        }\n    }\n    const getTownship = (e) => {\n        const township = {\n            selected: e.target.value,\n            selectedName: e.target.value,\n        };\n        props.callback({ township })\n    }\n    const optionsItem = options.map((el, index) => <option value={ el.val } key={ index }>{ el.text }</option>);\n    \n    return ( props.county.selected &&\n        <Row className=\"justify-content-md-center mb-2 mt-2\">\n            <Col md=\"5\">\n                <FormControl as=\"select\" custom\n                    onChange={ getTownship.bind(this) }\n                    value={props.township.selected}>\n                    <option value=\"\" disabled>---請選擇鄉鎮市區---</option>\n                    { optionsItem }\n                </FormControl>\n            </Col>\n        </Row>\n\n)\n}\n\nexport default TownshipSelect;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Table, Pagination, Spinner } from 'react-bootstrap';\n\nconst CusTable = (props) => {\n    const [data, setData] = useState([]);\n    const [updateTime, setUpdateTime] = useState('');\n    const [page, setPage] = useState(0);\n    const [loading, setLoading] = useState(false);\n    useEffect(() => {\n        fetch();\n    }, []);\n    function fetch() {\n        setLoading(true);\n        axios\n            .get('https://3000.gov.tw/hpgapi-openmap/api/getPostData')\n            .then((resp) => {\n                setUpdateTime(resp.data[0].updateTime)\n                setData(resp\n                            .data\n                            .filter((el) => {\n                                return props.county.selected ? el.hsnCd === props.county.selected : el\n                            })\n                            .filter((el) => {\n                                return props.township.selected ? el.townNm === props.township.selected : el\n                            }));\n                setLoading(false);\n            });\n    }\n    useEffect(() => {\n        fetch();\n    }, [props.county.selected]);\n    useEffect(() => {\n        fetch();\n    }, [props.township.selected]);\n    const urlBase = 'https://www.google.com.tw/maps/place/'\n    let listItem = data.slice(page*50, (page+1)*50).map((el, index) => (\n        <tr key={ index }>\n            <td>{ index + 1 }</td>\n            <td>{ el.hsnNm }</td>\n            <td>{ el.storeNm }</td>\n            <td><a href={`${urlBase}${el.zipCd}${el.addr.replace(/\\(.*\\)/, '')}/@${el.latitude},${el.longitude}`} title=\"打開 google 地圖\" target=\"_bland\">{ el.addr }</a></td>\n            <td>{ el.tel }</td>\n            <td>{ el.busiTime.split('<br>').map((el, index) => <div key={`busiT${index}`}>{el}</div>) }</td>\n            <td>{ el.busiMemo.split('<br>').map((el, index) => <div key={`busiM${index}`}>{el}</div>) }</td>\n            <td>{ el.total }</td>\n        </tr>\n    ));\n    const changePage = (i) => {\n        if (i >= 0 && i <= totalPage) {\n            setPage(i);\n        }\n    }\n    let active = page;\n    let totalPage = data.length / 50;\n    let items = [];\n    for (let number = 0; number <= totalPage; number++) {\n        if (active < 3) {\n            if (number > 0 && number < active +4 || number > totalPage - 3) {\n                items.push(\n                    <Pagination.Item key={ number } active={ number === active } onClick={ () => changePage(number) }>\n                        {number+1}\n                    </Pagination.Item>,\n                );\n            } else if (number === active+5) {\n                items.push(<Pagination.Ellipsis key=\"ellipsis-1\" />)\n            }\n        } else {\n            if (number > 0 && number < 2 || number > active - 2 && number < active + 2 || number > totalPage - 2) {\n                items.push(\n                    <Pagination.Item key={ number } active={ number === active } onClick={ () => changePage(number) }>\n                        {number+1}\n                    </Pagination.Item>,\n                );\n            } else if (number === active - 2 ) {\n                items.push(<Pagination.Ellipsis key=\"ellipsis-1\" />)\n            } else if (number === active + 2) {\n                items.push(<Pagination.Ellipsis key=\"ellipsis-2\" />)\n            } \n        }\n\n    }\n\n    const paginationBasic = (\n        <div className=\"d-flex justify-content-center\">\n            <Pagination>\n                <Pagination.First onClick={ () => changePage(1) } ></Pagination.First>\n                <Pagination.Prev onClick={ () => changePage(page-1) } />\n                <Pagination.Item onClick={ () => changePage(0) } >1</Pagination.Item>\n                { items }\n                <Pagination.Next onClick={ () => changePage(page+1) } />\n                <Pagination.Last onClick={ () => changePage(totalPage) } ></Pagination.Last>\n            </Pagination>\n        </div>\n    );\n    return(\n        <div className=\"overflow-hidden\">\n            <Table striped bordered hover className=\"w-100\">\n                <caption className=\"text-right\">更新時間：{ updateTime }</caption>\n                <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>縣市名稱</th>\n                        <th>分局名稱</th>\n                        <th>地址</th>\n                        <th>電話</th>\n                        <th>營業時間</th>\n                        <th>營業備註</th>\n                        <th>存量</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    { listItem }\n                </tbody>\n            </Table>\n            { paginationBasic }\n            <Spinner animation=\"border\" role=\"status\" className={'position-absolute absolute-bottom ' + (loading ? 'visible' : 'invisible')}>\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        </div>\n    )\n}\nexport default CusTable;","import React, { Component } from 'react';\nimport './App.css';\nimport { Container, Navbar } from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport CountySelect from  './component/CountySelect';\nimport TownshipSelect from './component/TownshipSelect';\nimport CusTable from './component/CusTable';\n\nclass App extends Component {\n    constructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tcnOptions: [\n\t\t\t\t{ text: '臺北市', val: 'A' },\n\t\t\t\t{ text: '臺中市', val: 'B' },\n\t\t\t\t{ text: '基隆市', val: 'C' },\n\t\t\t\t{ text: '臺南市', val: 'D' },\n\t\t\t\t{ text: '高雄市', val: 'E' },\n\t\t\t\t{ text: '新北市', val: 'F' },\n\t\t\t\t{ text: '宜蘭縣', val: 'G' },\n\t\t\t\t{ text: '桃園市', val: 'H' },\n\t\t\t\t{ text: '新竹市', val: 'O' },\n\t\t\t\t{ text: '新竹縣', val: 'J' },\n\t\t\t\t{ text: '苗栗縣', val: 'K' },\n\t\t\t\t{ text: '南投縣', val: 'M' },\n\t\t\t\t{ text: '彰化縣', val: 'N' },\n\t\t\t\t{ text: '雲林縣', val: 'P' },\n\t\t\t\t{ text: '嘉義市', val: 'I' },\n\t\t\t\t{ text: '嘉義縣', val: 'Q' },\n\t\t\t\t{ text: '屏東縣', val: 'T' },\n\t\t\t\t{ text: '花蓮縣', val: 'U' },\n\t\t\t\t{ text: '臺東縣', val: 'V' },\n\t\t\t\t{ text: '澎湖縣', val: 'X' },\n\t\t\t\t{ text: '金門縣', val: 'W' },\n\t\t\t\t{ text: '連江縣', val: 'Z' },\n\t\t\t],\n\t\t\tcounty: {\n\t\t\t\tselected: \"\",\n\t\t\t\tselectedName: \"\",\n\t\t\t},\n\t\t\ttownship: {\n\t\t\t\tselected: \"\",\n\t\t\t\tselectedName: \"\",\n\t\t\t},\n\t\t};\n    }\n    callback = (val)  => {\n\t\tthis.setState(val);\n\t}\n    render() {\n        return (\n            <div className=\"App\">\n                <Navbar  bg=\"dark\" variant=\"dark\" expand=\"lg\">\n                    <Navbar.Brand  href=\"#\" >振興券郵局庫存速查</Navbar.Brand>\n                </Navbar>\n                <Container>\n                    <CountySelect\n                        options={ this.state.cnOptions }\n                        county={ this.state.county }\n                        callback={ this.callback }\n                    />\n                    <TownshipSelect\n                        county={ this.state.county }\n                        township={ this.state.township }\n                        callback={ this.callback }\n                    />\n                    <CusTable \n                        county={ this.state.county } \n                        township={ this.state.township }\n                    />\n                </Container>\n                <footer className=\"bg-light position-fixed fixed-bottom\">made by listennn08.</footer>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
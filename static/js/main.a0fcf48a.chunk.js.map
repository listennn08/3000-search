{"version":3,"sources":["logo.svg","component/CountySelect.js","component/TownshipSelect.js","component/CusTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CountySelect","props","optionsItem","options","map","el","value","val","text","Row","className","Col","md","FormControl","as","custom","class","onChange","e","name","filter","target","county","selected","selectedName","callback","township","bind","disabled","TownshipSelect","useState","setOptions","useEffect","getOptionsItem","$","get","resp","find","length","data","html","indexOf","replace","CusTable","setData","updateTime","setUpdateTime","page","setLoading","fetch","axios","then","hsnCd","townNm","slice","listItem","index","hsnNm","storeNm","href","zipCd","addr","latitude","longitude","title","tel","busiTime","split","busiMemo","total","Table","striped","bordered","hover","App","setState","state","cnOptions","Navbar","bg","variant","expand","Brand","Container","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a0fcf48a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport { FormControl, Row, Col } from 'react-bootstrap';\r\n\r\nconst CountySelect = (props) => {\r\n    const optionsItem = props.options.map((el) => <option value={ el.val }>{ el.text }</option>);\r\n    const getCounty = (e) => {\r\n        const name = props.options.filter((el) => {\r\n                if (el.val === e.target.value) {\r\n                    return el.text;\r\n                }\r\n            })[0].text;\r\n        const county = {\r\n            selected: e.target.value,\r\n            selectedName: name\r\n        };\r\n        props.callback({ county });\r\n        props.callback({\r\n            township: {\r\n                selected: '',\r\n                selectedName: '',\r\n            }\r\n        })\r\n    }\r\n    return (\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col md=\"5\">\r\n                    <FormControl as=\"select\" custom\r\n                        class=\"offset-md-5 form-control col-md-3 mb-2 mt-2\"\r\n                        onChange={ getCounty.bind(this) }\r\n                        value={ props.county.selected }\r\n                    >\r\n                    <option value=\"\" disabled>---請選擇縣市---</option>\r\n                    { optionsItem }\r\n                    </FormControl>\r\n                </Col>\r\n            </Row>\r\n    );\r\n}\r\n\r\nexport default CountySelect;","import React, { useState, useEffect } from 'react';\r\nimport $ from 'jquery';\r\nimport { FormControl, Row, Col } from 'react-bootstrap';\r\n\r\nconst TownshipSelect = (props) => {\r\n    const [ options, setOptions ] = useState([]);\r\n    useEffect(() => {\r\n        getOptionsItem();\r\n    }, [props.county.selected, props.county.selectedName]);\r\n    const getOptionsItem = () => {\r\n        if (props.county.selected) {\r\n            $.get(`https://api.nlsc.gov.tw/other/ListTown1/${props.county.selected}`,\r\n            (resp) => {\r\n                if ($(resp).find('townItem').length > 0) {\r\n                    const data = [...$(resp).find('townItem')]\r\n                        .filter((el) => $(el).find('towncode01').html())\r\n                        .map((el) => {\r\n                            if ($(el).find('townname').html().indexOf('臺灣省') > -1) {\r\n                                $(el).find('townname').html(\r\n                                    $(el).find('townname').html().replace('臺灣省', '')\r\n                                )\r\n                            } else if ($(el).find('townname').html().indexOf('福建省') > -1) {\r\n                                $(el).find('townname').html(\r\n                                $(el).find('townname').html().replace('福建省', '')\r\n                                )\r\n                            }\r\n                            return {\r\n                                text: $(el).find('townname').html().replace(props.county.selectedName, ''),\r\n                                val: $(el).find('townname').html().replace(props.county.selectedName, ''),\r\n                            }\r\n                        });\r\n                    setOptions(data);\r\n                }\r\n\r\n            })\r\n        }\r\n    }\r\n    const getTownship = (e) => {\r\n        const township = {\r\n            selected: e.target.value,\r\n            selectedName: e.target.value,\r\n        };\r\n        props.callback({ township })\r\n    }\r\n    const optionsItem = options.map(el => <option value={ el.val }>{ el.text }</option>);\r\n    \r\n    return ( props.county.selected &&\r\n        <Row className=\"justify-content-md-center\">\r\n            <Col md=\"5\">\r\n                <FormControl as=\"select\" custom\r\n                    onChange={ getTownship.bind(this) }\r\n                    value={props.township.selected}>\r\n                    <option value=\"\" disabled>---請選擇鄉鎮市區---</option>\r\n                    { optionsItem }\r\n                </FormControl>\r\n            </Col>\r\n        </Row>\r\n\r\n)\r\n}\r\n\r\nexport default TownshipSelect;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nconst CusTable = (props) => {\r\n    const [data, setData] = useState([]);\r\n    const [updateTime, setUpdateTime] = useState('');\r\n    const [page, setPage] = useState(0);\r\n    const [loading, setLoading] = useState(false);\r\n    useEffect(() => {\r\n        fetch();\r\n    }, []);\r\n    function fetch() {\r\n        setLoading(true);\r\n        axios\r\n            .get('https://3000.gov.tw/hpgapi-openmap/api/getPostData')\r\n            .then((resp) => {\r\n                setUpdateTime(resp.data[0].updateTime)\r\n                setData(resp\r\n                            .data\r\n                            .filter((el) => {\r\n                                return props.county.selected ? el.hsnCd === props.county.selected : el\r\n                            })\r\n                            .filter((el) => {\r\n                                return props.township.selected ? el.townNm === props.township.selected : el\r\n                            })\r\n                            .slice(page, page+100));\r\n                setLoading(false);\r\n            })\r\n    }\r\n    useEffect(() => {\r\n        fetch();\r\n    }, [props.county.selected]);\r\n    useEffect(() => {\r\n        fetch();\r\n    }, [props.township.selected]);\r\n\tconst urlBase = 'https://www.google.com.tw/maps/place/'\r\n    const listItem = data.map((el, index) => (\r\n        <tr>\r\n            <td>{ index + 1 }</td>\r\n            <td>{ el.hsnNm }</td>\r\n            <td>{ el.storeNm }</td>\r\n            <td><a href={`${urlBase}${el.zipCd}${el.addr.replace(/\\(.*\\)/, '')}/@${el.latitude},${el.longitude}`} title=\"打開 google 地圖\" target=\"_bland\">{ el.addr }</a></td>\r\n            <td>{ el.tel }</td>\r\n            <td>{ el.busiTime.split('<br>').map((el) => <div>{el}</div>) }</td>\r\n            <td>{ el.busiMemo.split('<br>').map((el) => <div>{el}</div>) }</td>\r\n            <td>{ el.total }</td>\r\n        </tr>\r\n\t))\r\n    return(\r\n        <Table striped bordered hover>\r\n            <caption class=\"text-right\">更新時間：{ updateTime }</caption>\r\n            <thead>\r\n                <th>#</th>\r\n                <th>縣市名稱</th>\r\n                <th>分局名稱</th>\r\n                <th>地址</th>\r\n                <th>電話</th>\r\n                <th>營業時間</th>\r\n                <th>營業備註</th>\r\n                <th>存量</th>\r\n            </thead>\r\n            <tbody>\r\n                { listItem }\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\nexport default CusTable;","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { Container, Navbar } from 'react-bootstrap'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport CountySelect from  './component/CountySelect';\r\nimport TownshipSelect from './component/TownshipSelect';\r\nimport CusTable from './component/CusTable';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tcnOptions: [\r\n\t\t\t\t{ text: '臺北市', val: 'A' },\r\n\t\t\t\t{ text: '臺中市', val: 'B' },\r\n\t\t\t\t{ text: '基隆市', val: 'C' },\r\n\t\t\t\t{ text: '臺南市', val: 'D' },\r\n\t\t\t\t{ text: '高雄市', val: 'E' },\r\n\t\t\t\t{ text: '新北市', val: 'F' },\r\n\t\t\t\t{ text: '宜蘭縣', val: 'G' },\r\n\t\t\t\t{ text: '桃園市', val: 'H' },\r\n\t\t\t\t{ text: '新竹市', val: 'O' },\r\n\t\t\t\t{ text: '新竹縣', val: 'J' },\r\n\t\t\t\t{ text: '苗栗縣', val: 'K' },\r\n\t\t\t\t{ text: '南投縣', val: 'M' },\r\n\t\t\t\t{ text: '彰化縣', val: 'N' },\r\n\t\t\t\t{ text: '雲林縣', val: 'P' },\r\n\t\t\t\t{ text: '嘉義市', val: 'I' },\r\n\t\t\t\t{ text: '嘉義縣', val: 'Q' },\r\n\t\t\t\t{ text: '屏東縣', val: 'T' },\r\n\t\t\t\t{ text: '花蓮縣', val: 'U' },\r\n\t\t\t\t{ text: '臺東縣', val: 'V' },\r\n\t\t\t\t{ text: '澎湖縣', val: 'X' },\r\n\t\t\t\t{ text: '金門縣', val: 'W' },\r\n\t\t\t\t{ text: '連江縣', val: 'Z' },\r\n\t\t\t],\r\n\t\t\tcounty: {\r\n\t\t\t\tselected: \"\",\r\n\t\t\t\tselectedName: \"\",\r\n\t\t\t},\r\n\t\t\ttownship: {\r\n\t\t\t\tselected: \"\",\r\n\t\t\t\tselectedName: \"\",\r\n\t\t\t},\r\n\t\t};\r\n    }\r\n    callback = (val)  => {\r\n\t\tthis.setState(val);\r\n\t}\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Navbar  bg=\"dark\" variant=\"dark\" expand=\"lg\">\r\n                    <Navbar.Brand  href=\"#\" >振興券郵局庫存速查</Navbar.Brand>\r\n                </Navbar>\r\n                <Container>\r\n                    <CountySelect\r\n                        options={ this.state.cnOptions }\r\n                        county={ this.state.county }\r\n                        callback={ this.callback }\r\n                    />\r\n                    <TownshipSelect\r\n                        county={ this.state.county }\r\n                        township={ this.state.township }\r\n                        callback={ this.callback }\r\n                    />\r\n                    <CusTable \r\n                        county={ this.state.county } \r\n                        township={ this.state.township }\r\n                    />\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["component/CountySelect.js","component/TownshipSelect.js","component/CusTable.js","App.js","serviceWorker.js","index.js"],"names":["CountySelect","props","optionsItem","options","map","el","index","value","val","key","text","Row","className","Col","md","FormControl","as","custom","onChange","e","name","filter","target","county","selected","selectedName","callback","township","bind","disabled","TownshipSelect","useState","setOptions","useEffect","$","get","resp","find","length","data","html","indexOf","replace","CusTable","setData","updateTime","setUpdateTime","page","setPage","totalPage","setTotalPage","active","setActive","loading","setLoading","axios","then","respData","hsnCd","townNm","listItem","slice","hsnNm","storeNm","href","zipCd","addr","latitude","longitude","title","tel","busiTime","split","busiMemo","total","changePage","i","items","number","push","Pagination","Item","onClick","Ellipsis","paginationBasic","First","Prev","Next","Last","Table","striped","bordered","hover","Spinner","animation","role","App","setState","state","cnOptions","Navbar","bg","variant","expand","Brand","Container","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6cf0ae10.chunk.js","sourcesContent":["import React from 'react';\nimport { FormControl, Row, Col } from 'react-bootstrap';\n\nconst CountySelect = (props) => {\n  const optionsItem = props.options.map((el, index) => <option value={ el.val } key={ index }>{ el.text }</option>);\n  const getCounty = (e) => {\n    const name = props.options.filter((el) => el.val === e.target.value)[0].text;\n    const county = {\n      selected: e.target.value,\n      selectedName: name\n    };\n    props.callback({ county });\n    props.callback({\n      township: {\n        selected: '',\n        selectedName: '',\n      }\n    })\n  }\n  return (\n    <Row className='justify-content-md-center mt-2 mb-2'>\n      <Col md='5'>\n        <FormControl as='select' custom\n            onChange={ getCounty.bind(this) }\n            value={ props.county.selected }\n        >\n          <option value='' disabled>---請選擇縣市---</option>\n          { optionsItem }\n        </FormControl>\n      </Col>\n    </Row>\n  );\n};\n\nexport default CountySelect;\n","import React, { useState, useEffect } from 'react';\nimport $ from 'jquery';\nimport { FormControl, Row, Col } from 'react-bootstrap';\n\nconst TownshipSelect = (props) => {\n  const [ options, setOptions ] = useState([]);\n  useEffect(() => {\n    const getOptionsItem = () => {\n      if (props.county.selected) {\n        $.get(`https://api.nlsc.gov.tw/other/ListTown1/${props.county.selected}`,\n        (resp) => {\n          if ($(resp).find('townItem').length > 0) {\n            const data = [...$(resp).find('townItem')]\n              .filter((el) => $(el).find('towncode01').html())\n              .map((el) => {\n                if ($(el).find('townname').html().indexOf('臺灣省') > -1) {\n                  $(el).find('townname').html(\n                    $(el).find('townname').html().replace('臺灣省', '')\n                  )\n                } else if ($(el).find('townname').html().indexOf('福建省') > -1) {\n                  $(el).find('townname').html(\n                    $(el).find('townname').html().replace('福建省', '')\n                  )\n                }\n                return {\n                  text: $(el).find('townname').html().replace(props.county.selectedName, ''),\n                  val: $(el).find('townname').html().replace(props.county.selectedName, ''),\n                }\n              });\n            setOptions(data);\n          }\n        })\n      }\n    }\n    getOptionsItem();\n  }, [props.county.selected, props.county.selectedName]);\n  const getTownship = (e) => {\n    const township = {\n      selected: e.target.value,\n      selectedName: e.target.value,\n    };\n    props.callback({ township })\n  }\n  const optionsItem = options.map((el, index) => <option value={ el.val } key={ index }>{ el.text }</option>);\n  \n  return ( props.county.selected &&\n    <Row className='justify-content-md-center mb-2 mt-2'>\n      <Col md='5'>\n        <FormControl as='select' custom\n          onChange={ getTownship.bind(this) }\n          value={ props.township.selected }\n        >\n          <option value='' disabled>---請選擇鄉鎮市區---</option>\n          { optionsItem }\n        </FormControl>\n      </Col>\n    </Row>\n  )\n}\n\nexport default TownshipSelect;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Table, Pagination, Spinner } from 'react-bootstrap';\n\nconst CusTable = (props) => {\n  const [data, setData] = useState([]);\n  const [updateTime, setUpdateTime] = useState('');\n  const [page, setPage] = useState(0);\n  const [totalPage, setTotalPage] = useState(0);\n  const [active, setActive] = useState(0);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetch = () => {\n      setLoading(true);\n      axios\n        .get('https://3000.gov.tw/hpgapi-openmap/api/getPostData')\n        .then((resp) => {\n          const respData = resp.data\n            .filter((el) => props.county.selected \n              ? el.hsnCd === props.county.selected \n              : el\n            )\n            .filter((el) => props.township.selected \n              ? el.townNm === props.township.selected \n              : el\n            );\n          setUpdateTime(respData[0].updateTime)\n          setData(respData);\n          setTotalPage(respData.length / 50);\n          setLoading(false);\n          setActive(0);\n        });\n    }\n    fetch();\n  }, [props.county.selected, props.township.selected]);\n\n  const urlBase = 'https://www.google.com.tw/maps/place/'\n  let listItem = data.slice(page * 50, (page + 1) * 50).map((el, index) => (\n    <tr key={ index }>\n      <td>{ index + 1 }</td>\n      <td>{ el.hsnNm }</td>\n      <td>{ el.storeNm }</td>\n      <td><a href={`${urlBase}${el.zipCd}${el.addr.replace(/\\(.*\\)/, '')}/@${el.latitude},${el.longitude}`} title='打開 google 地圖' target='_bland'>{ el.addr }</a></td>\n      <td>{ el.tel }</td>\n      <td>{ el.busiTime.split('<br>').map((el, index) => <div key={`busiT${index}`}>{el}</div>) }</td>\n      <td>{ el.busiMemo.split('<br>').map((el, index) => <div key={`busiM${index}`}>{el}</div>) }</td>\n      <td>{ el.total }</td>\n    </tr>\n  ));\n\n  const changePage = (i) => {\n    if (i >= 0 && i <= totalPage) {\n      setPage(i);\n      setActive(i);\n    }\n  }\n\n  let items = [];\n  for (let number = 1; number < totalPage; number++) {\n    if (active < 3) {\n      if (number < active + 4 || number > totalPage - 4) {\n        items.push(\n          <Pagination.Item\n            key={ number }\n            active={ number === active }\n            onClick={ () => changePage(number) }\n          >\n            { number + 1 }\n          </Pagination.Item>,\n        );\n      } else if (number === active + 5) {\n        items.push(<Pagination.Ellipsis key='ellipsis-1' />)\n      }\n    } else {\n      if ((number < 2 || number > active - 2) && (number < active + 2 || number > totalPage - 2)) {\n        items.push(\n          <Pagination.Item\n            key={ number }\n            active={ number === active }\n            onClick={ () => changePage(number) }\n          >\n            { number + 1 }\n          </Pagination.Item>,\n        );\n      } else if (number === active - 2 ) {\n        items.push(<Pagination.Ellipsis key='ellipsis-1' />)\n      } else if (number === active + 2) {\n        items.push(<Pagination.Ellipsis key='ellipsis-2' />)\n      }\n    }\n  }\n\n  const paginationBasic = (\n      <div className='d-flex justify-content-center'>\n        <Pagination>\n          <Pagination.First onClick={ () => changePage(1) } disabled={active === 0}></Pagination.First>\n          <Pagination.Prev onClick={ () => changePage(page - 1) } disabled={active === 0}/>\n          <Pagination.Item key=\"0\" active={ active === 0 } onClick={ () => changePage(0) }>1</Pagination.Item>\n          { items }\n          <Pagination.Next onClick={ () => changePage(page + 1) } disabled={active === totalPage}/>\n          <Pagination.Last onClick={ () => changePage(totalPage) } disabled={active === totalPage}></Pagination.Last>\n        </Pagination>\n      </div>\n  );\n  return (\n    <div className='overflow-hidden'>\n      <Table striped bordered hover className='w-100'>\n        <caption className='text-right'>更新時間：{ updateTime }</caption>\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>縣市名稱</th>\n            <th>分局名稱</th>\n            <th>地址</th>\n            <th>電話</th>\n            <th>營業時間</th>\n            <th>營業備註</th>\n            <th>存量</th>\n          </tr>\n        </thead>\n        <tbody>\n          { listItem }\n        </tbody>\n      </Table>\n      { paginationBasic }\n      <Spinner\n        animation='border'\n        role='status'\n        className={ 'position-absolute absolute-bottom ' + (loading ? 'visible' : 'invisible') }\n      >\n        <span className='sr-only'>Loading...</span>\n      </Spinner>\n    </div>\n  );\n};\n\nexport default CusTable;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Container, Navbar } from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport CountySelect from  './component/CountySelect';\nimport TownshipSelect from './component/TownshipSelect';\nimport CusTable from './component/CusTable';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      cnOptions: [\n        { text: '臺北市', val: 'A' },\n        { text: '臺中市', val: 'B' },\n        { text: '基隆市', val: 'C' },\n        { text: '臺南市', val: 'D' },\n        { text: '高雄市', val: 'E' },\n        { text: '新北市', val: 'F' },\n        { text: '宜蘭縣', val: 'G' },\n        { text: '桃園市', val: 'H' },\n        { text: '新竹市', val: 'O' },\n        { text: '新竹縣', val: 'J' },\n        { text: '苗栗縣', val: 'K' },\n        { text: '南投縣', val: 'M' },\n        { text: '彰化縣', val: 'N' },\n        { text: '雲林縣', val: 'P' },\n        { text: '嘉義市', val: 'I' },\n        { text: '嘉義縣', val: 'Q' },\n        { text: '屏東縣', val: 'T' },\n        { text: '花蓮縣', val: 'U' },\n        { text: '臺東縣', val: 'V' },\n        { text: '澎湖縣', val: 'X' },\n        { text: '金門縣', val: 'W' },\n        { text: '連江縣', val: 'Z' },\n      ],\n      county: {\n        selected: '',\n        selectedName: '',\n      },\n      township: {\n        selected: '',\n        selectedName: '',\n      },\n    };\n  }\n\n  callback = (val)  => { this.setState(val); }\n  render() {\n    return (\n      <div className='App'>\n        <Navbar  bg='dark' variant='dark' expand='lg'>\n          <Navbar.Brand  href='#'>振興券郵局庫存速查</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <CountySelect\n            options={ this.state.cnOptions }\n            county={ this.state.county }\n            callback={ this.callback }\n          />\n          <TownshipSelect\n            county={ this.state.county }\n            township={ this.state.township }\n            callback={ this.callback }\n          />\n          <CusTable \n            county={ this.state.county } \n            township={ this.state.township }\n          />\n        </Container>\n        <footer className='bg-light position-fixed fixed-bottom'>made by listennn08.</footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}